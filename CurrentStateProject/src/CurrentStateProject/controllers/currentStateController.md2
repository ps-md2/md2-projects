package CurrentStateProject.controllers

main {
	appVersion "1.0" 
	modelVersion "1.0"
	workflowManager CitizenAppRemoteConnection
	defaultConnection CitizenAppRemoteConnection 
	fileUploadConnection UploadConnection
}
remoteConnection WorkflowBackendConnection{
	uri "http://localhost:8080/CurrentStateProject.backend/service/"
}
remoteConnection UploadConnection{
	storagePath "C:/CurrentStateProject/"
	uri "http://localhost:9090/proxy?http://localhost:8080/CurrentStateProject.backend/"
}

remoteConnection CitizenAppRemoteConnection {
	uri "http://localhost:8080/CurrentStateProject.backend/service/"
}

remoteConnection AdministrativeAppRemoteConnection{
	uri "http://...."
	user "adminapp"
	password "Qwertz123"
	key "5678"
}

externalWebService sendEmail {
	url "http://psmd2.uni-muenster.de:8080/SendMail/api/mail/send/"
	method GET
	queryparams (
		"to" : "md2@trashmail.de"
		"subject" : "map.apps E-Mail"
		"body" : "Diese E-Mail wurde aus md2 map.apps verschickt! Hooray!"
	)
}

contentProvider Complaint ComplaintProvider {
	providerType CitizenAppRemoteConnection
}

contentProvider Address AddressProvider {
	providerType CitizenAppRemoteConnection
}

WorkflowElement LocationDetection{
	defaultProcessChain LocationProcessChain
	onInit {
		init,
		buttonInit,
		MyLocationAction,
		callWS
	}
	
	action CustomAction init{
		map LocationDetectionView.AddressData.streetValue to :AddressProvider.myStreet
		map LocationDetectionView.AddressData.streetNoValue to :AddressProvider.myStreetNo
		map LocationDetectionView.AddressData.cityValue to :AddressProvider.myCity
		map LocationDetectionView.AddressData.countryValue to :AddressProvider.myCountry
		map LocationDetectionView.AddressData.zipValue to :AddressProvider.myPostalCode
		map LocationDetectionView.AddressData.latitudeValue to :AddressProvider.myLatitude
		map LocationDetectionView.AddressData.longitudeValue to :AddressProvider.myLongitude
		map LocationVerifyView.AddressView.streetValue to :AddressProvider.myStreet
		map LocationVerifyView.AddressView.streetNoValue to :AddressProvider.myStreetNo
		map LocationVerifyView.AddressView.cityValue to :AddressProvider.myCity
		map LocationVerifyView.AddressView.zipValue to :AddressProvider.myPostalCode
		map LocationVerifyView.AddressView.countryValue to :AddressProvider.myCountry
		map LocationVerifyView.LatLoView.latitudeValue to :AddressProvider.myLatitude
		map LocationVerifyView.LatLoView.longitudeValue to :AddressProvider.myLongitude
	}
	
	action CustomAction callWS {
		bind action WebServiceCall sendEmail on LocationVerifyView.Buttons.Next2.onClick
	}
	
	 
	action CustomAction buttonInit{
		bind action FireEvent(LocationEvent) on LocationVerifyView.Buttons.Next2.onClick
		bind action FireEvent(WithoutPhotoEvent) on LocationVerifyView.Buttons.SkipUpload.onClick
		bind action FireEvent(LDVCancelWorkflow) on LocationDetectionView.Navbar.Cancel.onClick
		bind action FireEvent(LVVCancelWorkflow) on LocationVerifyView.Buttons.Cancel2.onClick
		bind action GoOn on LocationDetectionView.Navbar.Next.onClick
		
	}
	
	action CustomAction MyLocationAction {
		bind action Location ( inputs ( cityInput :AddressProvider.myCity
			 							streetInput :AddressProvider.myStreet
			 							streetNumberInput :AddressProvider.myStreetNo
			 							postalInput :AddressProvider.myPostalCode
			 							countryInput :AddressProvider.myCountry
			 							)
			 					outputs (
			 							latitudeOutput :AddressProvider.myLatitude
			 							longitudeOutput  :AddressProvider.myLongitude
			 							)
			 					)		 				
			 on LocationDetectionView.Navbar.DetectLocationBtn.onClick
	}
	
	action CustomAction GoOn{
		if (not LocationDetectionView.AddressData.cityValue equals "Münster"){
			call DisplayMessage("Only complaints from Münster are accepted!")
			//call DisplayMessage("Why the hell have you visited " & LocationDetectionView.AddressData.cityValue & "???")
		}
	}
	
	action CustomAction saveComplaint{
		set :ComplaintProvider.loc = :AddressProvider
		call ContentProviderOperation (save :ComplaintProvider)
	}
	
	processChain LocationProcessChain{
		step LocationDetection: 
			view LocationDetectionView
			proceed {on LocationDetectionView.Navbar.Next.onClick
				given {(LocationDetectionView.AddressData.cityValue equals "Münster")} 
				then saveComplaint}

		step LocationVerify:
			view LocationVerifyView
			reverse on LocationVerifyView.Buttons.Previous.onClick
	}

}


WorkflowElement Mediacapturing {
	defaultProcessChain MediaProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init{
		map MediaCapturingView.navbar.UploadBtn to :ComplaintProvider.picture
		map MediaCapturingView.imageoutput to :ComplaintProvider.picture
	}
	
	action CustomAction next {
		bind action FireEvent(MediacapturedEvent) on MediaCapturingView.navbar.Next.onClick
	}
	
	processChain MediaProcessChain {
	step MediaCapturing:
		view MediaCapturingView
	}
}

WorkflowElement SubmitComplaint {
	defaultProcessChain ComplaintProcessChain
	onInit {
		init
	}
	
	action CustomAction init {
		map SubmitComplaintView.AddressView.streetValue to :AddressProvider.myStreet
		
		map SubmitComplaintView.AddressView.streetNoValue to :AddressProvider.myStreetNo
		map SubmitComplaintView.AddressView.cityValue to :AddressProvider.myCity
		map SubmitComplaintView.AddressView.countryValue to :AddressProvider.myCountry
		map SubmitComplaintView.AddressView.zipValue to :AddressProvider.myPostalCode
		map SubmitComplaintView.LatLoView.latitudeValue to :AddressProvider.myLatitude
		map SubmitComplaintView.LatLoView.longitudeValue to :AddressProvider.myLongitude
		map SubmitComplaintView.LatLoView.descriptionTxt to :ComplaintProvider.descriptions

		map SubmitComplaintView.imageoutput to :ComplaintProvider.picture
		
		bind action next on SubmitComplaintView.submitComplaint.onClick
		bind action FireEvent(CancelWorkflow) on SubmitComplaintView.Cancel3.onClick
	}
	
	action CustomAction next {
		set :ComplaintProvider.loc = :AddressProvider
		set :ComplaintProvider.status = "VALUE1"
		call ContentProviderOperation(save :AddressProvider)
		call ContentProviderOperation(save :ComplaintProvider)
		call FireEvent(SubmitEvent)
		call DisplayMessage ("Complaint submitted!")
	}
	
	processChain ComplaintProcessChain {
		step SubmitComplaint:
			view SubmitComplaintView
	}
	
	invokable at "fileComplaint" using POST {
		set :ComplaintProvider.loc to :AddressProvider
		:AddressProvider.myStreet as street
		:AddressProvider.myStreetNo as streetNo
		:AddressProvider.myCity as city
		:AddressProvider.myPostalCode as plz
		:ComplaintProvider.descriptions as desc
		default :ComplaintProvider.status = "User is filling out complaint" 
	}
}

WorkflowElement ReviewComplaint {
	defaultProcessChain ReviewProcessChain
	onInit {
		init,
		next
	}
	
	action CustomAction init {
		map ViewComplaint.AddressView.streetValue to :AddressProvider.myStreet
		map ViewComplaint.AddressView.streetNoValue to :AddressProvider.myStreetNo
		map ViewComplaint.AddressView.zipValue to :AddressProvider.myPostalCode
		map ViewComplaint.AddressView.cityValue to :AddressProvider.myCity
		map ViewComplaint.AddressView.countryValue to :AddressProvider.myCountry
		map ViewComplaint.AddressView.latitudeValue to :AddressProvider.myLatitude
		map ViewComplaint.AddressView.longitudeValue to :AddressProvider.myLongitude
		
		map ViewComplaint.AddressView.descriptionText to :ComplaintProvider.descriptions
		
		map ViewComplaint.imageoutput to :ComplaintProvider.picture
		
		map UpdateComplaint.feedbackView.feedback to :ComplaintProvider.feedback
		map UpdateComplaint.feedbackView.status to :ComplaintProvider.status
		
		bind action sendFeedback on UpdateComplaint.SendFeedback.onClick
	}
	
	action CustomAction sendFeedback{
		//set :ComplaintProvider.feedback = UpdateComplaint.Feedback
		set :ComplaintProvider.status = "VALUE3"
		call ContentProviderOperation(save :ComplaintProvider)
		call DisplayMessage ("Changes saved!")
		call FireEvent(ReviewEvent)
	}
	
	
	action CustomAction next{
		bind action GoOn on ViewComplaint.Next4.onClick
	}
	
	action CustomAction GoOn{
		set :ComplaintProvider.status = "VALUE2"
		if(ViewComplaint.AddressView.addFeedback equals false){
			set :ComplaintProvider.status = "VALUE3"
			call ContentProviderOperation(save :ComplaintProvider)
			call FireEvent(ReviewEvent)
		}
	}
	
	
	processChain ReviewProcessChain {
		step ViewComplaint:
			view ViewComplaint
			proceed {
				on ViewComplaint.Next4.onClick given ViewComplaint.AddressView.addFeedback equals true
			}
		step UpdateComplaint:
			view UpdateComplaint
	}
}

WorkflowElement ReceiveFeedback {
	defaultProcessChain receiveChain
	onInit{
		init
	}
	
	action CustomAction init{
		map ViewFeedback.AddressData.streetValue to :AddressProvider.myStreet
		map ViewFeedback.AddressData.streetNoValue to :AddressProvider.myStreetNo
		map ViewFeedback.AddressData.zipValue to :AddressProvider.myPostalCode
		map ViewFeedback.AddressData.cityValue to :AddressProvider.myCity
		map ViewFeedback.AddressData.countryValue to :AddressProvider.myCountry
		map ViewFeedback.AddressData.latitudeValue to :AddressProvider.myLatitude
		map ViewFeedback.AddressData.longitudeValue to :AddressProvider.myLongitude
		
		map ViewFeedback.feedbackData.descriptionText to :ComplaintProvider.descriptions
		
		map ViewFeedback.imageoutput to :ComplaintProvider.picture
		
		map ViewFeedback.feedbackData.feedbackText to :ComplaintProvider.feedback
		
		bind action FireEvent(EndOfProcessEvent) on ViewFeedback.close.onClick
	}
	
	processChain receiveChain {
	step ViewFeedback:
		view ViewFeedback
	}
}
